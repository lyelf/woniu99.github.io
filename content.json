{"meta":{"title":"Snail99 Blog","subtitle":"","description":"Stay Hungry. Stay Foolish.","author":"蜗牛99","url":"http://lywoniu.com"},"pages":[{"title":"","date":"2017-09-03T12:18:36.445Z","updated":"2017-09-03T12:18:36.445Z","comments":true,"path":"404.html","permalink":"http://lywoniu.com/404.html","excerpt":"","text":""},{"title":"文章分类","date":"2016-09-03T12:15:18.000Z","updated":"2017-09-03T12:16:28.054Z","comments":true,"path":"categories/index.html","permalink":"http://lywoniu.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2016-09-03T12:10:02.000Z","updated":"2017-09-03T12:13:10.650Z","comments":true,"path":"tags/index.html","permalink":"http://lywoniu.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2017-09-02T14:13:42.610Z","updated":"2017-09-03T15:45:49.986Z","comments":true,"path":"2017/09/02/hello-world/","link":"","permalink":"http://lywoniu.com/2017/09/02/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"《图解http》笔记--10-Web的攻击技术","slug":"http10","date":"2017-08-22T12:28:31.000Z","updated":"2017-09-03T14:43:15.793Z","comments":true,"path":"2017/08/22/http10/","link":"","permalink":"http://lywoniu.com/2017/08/22/http10/","excerpt":"1 针对Web应用的攻击模式1.1 以服务器为目标的主动攻击 主动攻击(active attack)是指攻击者通过直接访问Web应用，把攻击代码传入的攻击模式。由于该模式是直接针对服务器上的资源进行的攻击，因此攻击者需要能够访问到那些资源。 主动攻击主要有SQL注入攻击和OS命令注入攻击。","text":"1 针对Web应用的攻击模式1.1 以服务器为目标的主动攻击 主动攻击(active attack)是指攻击者通过直接访问Web应用，把攻击代码传入的攻击模式。由于该模式是直接针对服务器上的资源进行的攻击，因此攻击者需要能够访问到那些资源。 主动攻击主要有SQL注入攻击和OS命令注入攻击。 1.2 以服务器为目标的被动攻击 被动攻击（passive attack）是指利用圈套策略执行攻击带码的攻击模式。在被动攻击过程中，攻击者不直接对目标Web应用访问发起攻击。 被动攻击的攻击模式如下： 攻击者诱使用户触发已设置好的陷阱，而陷阱会启动发送已嵌入攻击代码的HTTP请求。 当用户不知不觉中招之后，用户的浏览器或邮件客户端就会触发这个陷阱。 中招之后的用户浏览器会把含有攻击代码的HTTP请求发送给作为攻击目标的Web应用，运行攻击代码。 执行完攻击代码，存在安全漏洞的Web应用会成为攻击者的跳板，可能导致用户所持的Cookie等个人信息被窃取，登录状态中的用户权限遭恶意滥用等后果。 被动攻击中具有代表性的攻击是跨站脚本攻击和跨站点请求伪造。2. 因输出值转义不完全引发的安全漏洞2.1 跨站脚本攻击 跨站脚本攻击（Cross-Site Scripting,XSS）是指通过存在安全漏洞的Web网站注册用户的浏览器内运行非法的HTML标签或Javascript进行的一种攻击。动态创建的HTML部分有可能隐藏着安全漏洞。就这样，攻击者编写脚本设下陷阱，用户在自己的浏览器上运行时，一不小心就会受到攻击。 跨站脚本攻击有可能造成以下影响。 利用虚假输入表单骗取用户个人信息。 利用脚本窃取用户的Cookie值，被害者在不知情的情况下，帮助攻击者发送恶意请求。 显示伪造的文章或图片。 XSS是攻击者利用预先设置的陷阱触发的被动攻击。2.2 SQL注入攻击-SQL注入(SQL Injection)是指针对Web应用使用的数据库，通过运行非法的SQL而产生的攻击。 SQL注入攻击有以下影响： 非法查看或篡改数据库内的数据。 规避认证 执行和数据库服务器业务关联的程序等。2.3 OS命令注入攻击 OS命令注入攻击（OS Command Injection）是指通过Web应用，执行非法的操作系统命令达到攻击的目的。只要在能调用Shell函数的地方就存在被攻击的风险。 OS命令注入攻击可以向Shell发送命令，让Windows或Linux操作系统的命令行启动程序。也就是说，通过OS注入攻击可执行OS上安装的各种程序。2.4 DoS攻击 DoS攻击是一种让运行中的服务呈停止状态的攻击。有时也叫做服务停止攻击或拒绝服务攻击。DoS攻击的对象不仅限于Web网站，还包括网络设备及服务器等。 主要有以下两种DoS攻击方式： 集中利用访问请求造成资源过载，资源用尽的同时，实际上服务也就呈停止状态。通过攻击安全漏洞使服务停止。","categories":[],"tags":[{"name":"http","slug":"http","permalink":"http://lywoniu.com/tags/http/"},{"name":"web攻击技术","slug":"web攻击技术","permalink":"http://lywoniu.com/tags/web攻击技术/"}]},{"title":"《图解http》笔记--8-确认访问用户身份的认证","slug":"http08-1","date":"2017-08-20T06:42:17.000Z","updated":"2017-09-03T14:43:37.988Z","comments":true,"path":"2017/08/20/http08-1/","link":"","permalink":"http://lywoniu.com/2017/08/20/http08-1/","excerpt":"1.HTTP使用的认证方式：1.1 BASIC认证（基本认证） BASIC认证是Web服务器与通信客户端之间进行的认证方式，采用Base64编码方式，但不作加密处理。1.2 DIGEST(摘要认证) DIGEST认证使用质询/响应的方式（challenges/response），但不会像BISIC认证那样直接发送明文密码。质询响应方式是指，一开始一方会先发送认证要求给另一方，接着使用从另一方那接收的质询码计算生成响应码。最后将响应码返回给对方进行认证的方式。","text":"1.HTTP使用的认证方式：1.1 BASIC认证（基本认证） BASIC认证是Web服务器与通信客户端之间进行的认证方式，采用Base64编码方式，但不作加密处理。1.2 DIGEST(摘要认证) DIGEST认证使用质询/响应的方式（challenges/response），但不会像BISIC认证那样直接发送明文密码。质询响应方式是指，一开始一方会先发送认证要求给另一方，接着使用从另一方那接收的质询码计算生成响应码。最后将响应码返回给对方进行认证的方式。 1.3 SSL客户端认证 SSL客户端认证的认证步骤： 为达到SSL客户端认证的目的，需要事先将客户端证书分发给客户端，且客户端必须安装此证书。 接收到需要认证资源的请求，服务器会发送Certificate Request报文，要求客户端提供客户端证书。 用户选择将发送的客户端证书后，客户端会把客户端证书以Client Certificate报文方式发送给服务器。 服务器验证客户端证书通过后方可领取证书内客户端的公开密钥，然后开始HTTPS加密通信。 使用SSL客户端认证需要用到客户端证书，而客户端证书需要支付一定的费用才能使用。1.4 基于表单认证 基于表单的认证方法并不是在HTTP协议中定义的。客户端会向服务器上的Web应用程序发送登陆信息，按登陆信息的验证结果认证。因此多半认证是基于表单认证。 HTTP是无状态协议，之前已认证成功的用户状态无法通过协议层面保存下来。即，无法实现状态管理，因此即使当该用户继续访问，也无法区分他与其他用户。于是我们会使用Cookie类管理Section，以弥补HTTP协议中不存在的状态管理功能。 步骤： 客户端把用户ID和密码等登录信息放入报文的实体部分，通常是以POST方法把请求发送给服务器。而这时，会使用HTTPS通信来进行HTML表单画面的显示和用户输入数据的发送。 服务器会发放用以识别用户的Session ID.通过验证从客户端发过来的登陆信息进行身份认证，然后把用户的认证状态与Section ID绑定后记录在服务器端。 向客户端返回响应时，会在首部字段Set-Cookie内写入Session ID（如PHPSESSION=028a8c）. 你可以把Seccion ID想象成一种用以区分不同用户的等位号。然而，如果Session ID被第三方盗走，对方就伪装成你的身份进行恶意操作了。因此必须防止Session ID被盗，或被猜出。为了做到这点，Session ID应使用难以推测的字符串，且服务器端也需要进行有效期的管理，保证其安全性。另外，为减轻跨站脚本攻击（XSS）造成的损失，建议事先在Cookie内加上httponly属性。 客户端接收到从服务器端发来的Session ID后，会将其作为Cookie保存在本地。下次向服务器发送请求时，浏览器会自动发送Cookie，所以Session ID，所以Session ID也随之发送到服务器。 服务器端可通过验证接收到Session ID识别用户和其认证状态。","categories":[],"tags":[{"name":"图解http","slug":"图解http","permalink":"http://lywoniu.com/tags/图解http/"}]},{"title":"《图解HTTP》--笔记-7 确保Web安全的HTTPS","slug":"http08","date":"2017-08-19T03:34:29.000Z","updated":"2017-09-03T14:43:23.009Z","comments":true,"path":"2017/08/19/http08/","link":"","permalink":"http://lywoniu.com/2017/08/19/http08/","excerpt":"1. HTTP的缺点 通信使用明文（不加密），内容可能会被窃听 不验证通信方的身份，因此有可能遭遇伪装 无法证明报文的完整性，所以有可能已遭篡改","text":"1. HTTP的缺点 通信使用明文（不加密），内容可能会被窃听 不验证通信方的身份，因此有可能遭遇伪装 无法证明报文的完整性，所以有可能已遭篡改 2. HTTP+加密+认证+完整性保护=HTTPS http协议中没有加密机制，在HTTP通信接口部分用SSL(Secure Layer)和TSL(Transport Layer Security)协议。 通常，HTTP直接和TCP通信。当使用SSL时，则演变成先和SSL通信，再由SSL和TCP通信。简言之，HTTPS就是身披SSL外壳的HTTP。-HTTP采用共享密钥加密（加密时发送密钥给对方）和公开密钥加密（公有密钥和私有密钥）两者并用的混合加密机制。 公开密钥无法证明公开密钥本身就是货真价实的公开密钥。所有使用数字证书认证机构（CA,Certificate Authority）和其他机构颁发的公开密钥证书来证明公开密钥的正确性。 SSL的缺点 和使用HTTP相比，网络负载可能会变慢2到100倍。除去和TCP连接、发送HTTP请求·响应以外，还必须进行SSL通信，使得通信量增加。 SSL必须进行加密处理，在服务器和客户端都需要进行加密和解密的运算操作，比起HTTP会更多地消耗服务器和客户端的硬件资源，导致负载增强。-所以，不必都是用HTTPS通信，只有在包含个人信息等敏感数据时，才利用HTTPS加密通信。","categories":[],"tags":[{"name":"http","slug":"http","permalink":"http://lywoniu.com/tags/http/"},{"name":"SSL","slug":"SSL","permalink":"http://lywoniu.com/tags/SSL/"}]}]}